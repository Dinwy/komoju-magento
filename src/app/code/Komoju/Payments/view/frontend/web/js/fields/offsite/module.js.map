{
  "version": 3,
  "sources": ["../../../src/shared/validation.ts", "../../../src/shared/translations.ts", "../../../src/fields/offsite/i18n.ts", "../../../src/fields/offsite/module.ts"],
  "sourcesContent": ["// Adds validation to an input element.\nexport function addValidation<Translations extends I18n>(\n  _i18n: Translations, // Used only by typescript to compile-time catch missing translations.\n  input: HTMLInputElement,\n  callback: (input: HTMLInputElement) => keyof Translations['en'] | null\n) {\n  // Add a class so that we know this input has validation.\n  input.classList.add('has-validation');\n\n  // Tiny detail: if the user has never inputted anything, we don't want to run validations at all\n  // at the risk of showing an error message when the user is just clicking around.\n  input.addEventListener('input', () => {\n    input.dataset.validationDirty = 'true';\n  });\n\n  // Validation function. This will be called on 'blur' and also on a custom 'validate' event.\n  const validate = (event: Event) => {\n    const input = event.target as HTMLInputElement;\n\n    const errorMessageKey = callback(input);\n\n    if (errorMessageKey) {\n      showError(_i18n, input, errorMessageKey);\n    }\n  };\n  input.addEventListener('blur', (event) => {\n    if (input.dataset.validationDirty !== 'true') return;\n    else return validate(event);\n  });\n  input.addEventListener('validate', validate);\n\n  // When the user focuses on the input, remove all error artifacts.\n  input.addEventListener('focus', (event) => {\n    const input = event.target as HTMLInputElement;\n    clearErrors(input);\n  });\n}\n\nexport function showError<Translations extends I18n>(\n  _i18n: Translations, // Used only by typescript to compile-time catch missing translations.\n  input: HTMLInputElement,\n  messageKey: keyof Translations['en']\n) {\n  input.classList.add('invalid');\n  const key = messageKey as string;\n\n  // We don't want to show the same error twice!\n  const container = input.parentElement;\n  const dupeSelector = `komoju-error:not(.removing) > komoju-i18n[key=\"${key}\"]`;\n  if (container?.querySelector(dupeSelector)) {\n    return;\n  }\n\n  container?.append(createErrorElement(messageKey as string));\n}\n\nexport function clearErrors(input: HTMLInputElement) {\n  input.classList.remove('invalid');\n  input.parentElement?.querySelectorAll('komoju-error:not(.removing)').forEach((element) => {\n    element.remove();\n  });\n}\n\n// Runs validations on an <input> element.\nexport function runValidation(input: HTMLInputElement) {\n  // Fire the 'validate' custom event.\n  input.dispatchEvent(new CustomEvent('validate'));\n\n  // If there's an error message, return it.\n  const errorMessage = input.parentElement?.querySelector('komoju-error:not(.removing)')?.textContent;\n  return errorMessage ?? null;\n}\n\n// Creates the error message element that appears under an invalid input.\n// Mainly just called by addValidation().\nexport function createErrorElement(messageKey: string) {\n  const el = window.document.createElement('komoju-error');\n  const i18nEl = window.document.createElement('komoju-i18n') as KomojuI18nElement;\n  i18nEl.key = messageKey;\n  el.appendChild(i18nEl);\n  return el;\n}\n", "declare let window: WindowWithKomojuGlobals;\n\n// Call this to add messages to the registry.\n// Individual payment method modules can do this to add their own messages.\n// That way, we avoid needing to load all messages for every payment method upfront.\nexport function registerMessages(messages: I18n) {\n  if (!window.komojuTranslations) {\n    window.komojuTranslations = { 'en': {}, 'ja': {} };\n  }\n\n  for (const lang of Object.keys(window.komojuTranslations)) {\n    window.komojuTranslations[lang] = {\n      ...window.komojuTranslations[lang],\n      ...messages[lang],\n    };\n  }\n}\n", "export const en = {\n  'os.label.name': 'Customer name',\n  'os.label.email': 'Email address',\n  'os.label.phone': 'Phone number',\n  'os.error.required': 'Required',\n};\n\nexport const ja: typeof en = {\n  'os.label.name': '\u304A\u540D\u524D',\n  'os.label.email': '\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9',\n  'os.label.phone': '\u96FB\u8A71\u756A\u53F7',\n  'os.error.required': '\u5FC5\u9808\u9805\u76EE\u3067\u3059',\n};\n", "import '../../types.d';\n// @ts-ignore\nimport html from './template.html';\nimport { addValidation } from '../../shared/validation';\n\nimport { registerMessages } from '../../shared/translations';\nimport * as i18n from './i18n';\nregisterMessages(i18n);\n\nexport const render: KomojuRenderFunction = (root, paymentMethod) => {\n  root.innerHTML = html;\n\n  root.querySelectorAll('.fields').forEach((element) => {\n    element.classList.add(paymentMethod.type);\n  });\n\n  const fieldTemplate = root.querySelector('#additional-field')! as HTMLTemplateElement;\n  for (const field of paymentMethod.additional_fields ?? []) {\n    const element = fieldTemplate.content.cloneNode(true) as HTMLElement;\n    const input = element.querySelector('input') as HTMLInputElement;\n    const text = element.querySelector('komoju-i18n') as KomojuI18nElement;\n\n    if (field === 'email') input.type = 'email';\n    else if (field === 'phone') input.type = 'tel';\n    input.id = `offsite-${field}`;\n\n    text.key = `os.label.${field}`;\n\n    fieldTemplate.parentElement!.appendChild(element);\n\n    addValidation(i18n, input, (input) => {\n      if (input.value === '') return 'os.error.required';\n      return null;\n    });\n  }\n}\n\nexport const paymentDetails: KomojuPaymentDetailsFunction = (root, paymentMethod) => {\n  const result: any = {\n    type: paymentMethod.type,\n  };\n\n  for (const field of paymentMethod.additional_fields ?? []) {\n    const input = root.querySelector(`#offsite-${field}`)! as HTMLInputElement;\n    result[field] = input.value;\n  }\n\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["input", "input"]
}
